@page "/send_email"
@using BlazorShop.Models
@using MailKit
@inject IEmailSender EmailSender
@inject ILogger<EmailSenderPage> Logger

<h3>SendEmail</h3>

<EditForm Model="@_emailModel" OnValidSubmit="OnSendMessage">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <br />
    Кому(email-адрес):
    <br />
    <InputText @bind-Value="_emailModel.letterEmailAdress" />
    <br />
    <br />
    Тема письма:
    <br />
    <InputText @bind-Value="_emailModel.letterSubject" />
    <br />
    <br />
    Содержимое письма:
    <br />
    <InputTextArea @bind-Value="_emailModel.letterBody" />
    <br />
    <br /> <input type="submit" value="Отправить">
</EditForm>
<br />
<br />
<div>@_sendResult</div>

@code {
    //mySendMessageObject.SaveParamsObjectToFile();
    private SendEmailDataModel _emailModel = new();
    private string _sendResult = "";
    
    int _attemptToSend = 0;
    private async Task OnSendMessage()
    {
        _attemptToSend++;
        Logger.LogInformation("Попытка отправки имейла на адрес {Email}", _emailModel.letterEmailAdress);

        try //Вариант 1.
        {
            await EmailSender.SendEmail(_emailModel.letterEmailAdress, _emailModel.letterSubject, _emailModel.letterBody);
            _emailModel = new();
            _sendResult = "письмо отправлено";
        }
        catch (Exception e) when (_attemptToSend == 1 
                                  && e is ServiceNotAuthenticatedException 
                                        or ServiceNotConnectedException
                                        //...
                                        )
        {
            Logger.LogWarning(e, "Ошибка отправки имейла на адрес {Email}. Делаем еще одну попытку", _emailModel.letterEmailAdress, e.Message);
            await OnSendMessage(); //retry
        }
        catch (Exception e) // Если это последняя попытка, то логируем ошибку и выводим сообщение об ошибке.
        {
            // Даем разработчику явно понять, что произошла ошибка, и что нужно что-то делать.
            Logger.LogError(e, "Ошибка отправки имейла на адрес {Email}. Ошибка: {Error}", _emailModel.letterEmailAdress, e.Message);
            _sendResult = "Ошибка отправки письма";
        }
    }
}
